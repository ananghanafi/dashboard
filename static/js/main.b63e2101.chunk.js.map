{"version":3,"sources":["Invisiblebackface.png","Invisiblebackcover.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","face","alt","back","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iPCoBzBC,MAZf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,eAAeG,IAAI,SAC7CN,EAAAC,EAAAC,cAAA,OAAKE,IAAKG,IAAMJ,UAAU,QAAQG,IAAI,SACtCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,mBCFYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b63e2101.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Invisiblebackface.550a0ded.png\";","module.exports = __webpack_public_path__ + \"static/media/Invisiblebackcover.5198f310.png\";","import React from \"react\";\n// import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport face from \"./Invisiblebackface.png\";\nimport back from \"./Invisiblebackcover.png\";\nimport \"./App.css\";\n// import QrReader from 'react-qr-reader'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={face} className=\"gbounce face\" alt=\"face\" />\n        <img src={back} className=\"cover\" alt=\"back\" />\n        <div className=\"nama\">Anang Hanafi</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n// export default class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       userName: \"Anang Hanafi\",\n//       todoItems: [\n//         { action: \"Buy Flowers\", done: false },\n//         { action: \"Get Shoes\", done: false },\n//         { action: \"Collect Tickets\", done: true },\n//         { action: \"Call Joe\", done: false }\n//       ],\n//       newItemText: \"\"\n//     };\n//   }\n//   changeStateData = () => {\n//     this.setState({\n//       userName: this.state.userName === \"Anang Hanafi\" ? \"Bob\" : \"Anang Hanafi\"\n//     });\n//   };\n//   updateNewTextValue = event => {\n//     this.setState({ newItemText: event.target.value });\n//   };\n//   createNewTodo = () => {\n//     if (\n//       !this.state.todoItems.find(item => item.action === this.state.newItemText)\n//     ) {\n//       this.setState({\n//         todoItems: [\n//           ...this.state.todoItems,\n//           { action: this.state.newItemText, done: false }\n//         ],\n//         newItemText: \"\"\n//       });\n//     }\n//   };\n//   toggleTodo = todo =>\n//     this.setState({\n//       todoItems: this.state.todoItems.map(item =>\n//         item.action === todo.action ? { ...item, done: !item.done } : item\n//       )\n//     });\n//   todoTableRows = () =>\n//     this.state.todoItems.map(item => (\n//       <tr key={item.action}>\n//         <td>{item.action}</td>\n//         <td>\n//           <input\n//             type=\"checkbox\"\n//             checked={item.done}\n//             onChange={() => this.toggleTodo(item)}\n//           />\n//         </td>\n//       </tr>\n//     ));\n//   // render() {\n//   //   return (\n//   //     <div>\n//   //       <h4 className=\"bg-primary text-white text-center p-2\">\n//   //         {this.state.userName}'s To Do List\n//   //       </h4>\n//   //       <button className=\"btn btn-primary m-2\" onClick={this.changeStateData}>\n//   //         Change\n//   //       </button>\n//   //     </div>\n//   //   );\n//   // }\n//   render = () => (\n//     <div>\n//       <h4 className=\"bg-primary text-white text-center p-2\">\n//         {this.state.userName}'s To Do List (\n//         {this.state.todoItems.filter(t => !t.done).length} items to do)\n//       </h4>\n//       <div className=\"container-fluid\">\n//         <div className=\"my-1\">\n//           <input\n//             className=\"form-control\"\n//             value={this.state.newItemText}\n//             onChange={this.updateNewTextValue}\n//           />\n//           <button className=\"btn btn-primary mt-1\" onClick={this.createNewTodo}>\n//             Add\n//           </button>\n//         </div>\n//         <table className=\"table table-striped table-bordered\">\n//           <thead>\n//             <tr>\n//               <th>Description</th>\n//               <th>Done</th>\n//             </tr>\n//           </thead>\n//           <tbody>{this.todoTableRows()}</tbody>\n//         </table>\n//       </div>\n//       <button className=\"btn btn-primary m-2\" onClick={this.changeStateData}>\n//         Change\n//       </button>\n//     </div>\n//   );\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Belajar from './Belajar';\nimport App from './App';\n// import Camera from './Camera';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// ReactDOM.render(<Belajar />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Camera />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}